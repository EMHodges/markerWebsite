import { HttpClient } from '@angular/common/http';
import { Component } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { faCircleQuestion } from '@fortawesome/free-solid-svg-icons';
@Component({
  selector: 'app-upload',
  templateUrl: './upload.component.html',
  styleUrls: ['./upload.component.scss']
})
export class UploadComponent {

  private GOOGLE_QUESTIONNAIRE_SCRIPT = "https://script.google.com/macros/s/AKfycbwOsT62Fd6pmu4VB_82b1Xx_9JIuxRPl336uKM0fIoaajE0lRhlO7IVeA9odGW89d7H/exec"
  private GOOGLE_UPLOAD_FILE_SCRIPT = "https://script.google.com/macros/s/AKfycbypUcqv65Q36I2S2_syaGYbrvpr3FWugpgN4o4SX-OlFEPPDus7Sf3tLgWISoeoZQ8YIw/exec";
  private file: File | null = null;
  noFileSubmitted = true;
  errorMessage = ''
  successMessage = ''
  loadingMessage = ''
  validFileNotSubmitted: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);;
  
  id = new FormControl('', Validators.required)

  text_form = new FormGroup({
    changed: new FormControl(''),
    comments: new FormControl('')
  })

  form = new FormGroup({
    use_frequently: new FormControl(''),
    complex: new FormControl(''),
    easy: new FormControl(''),
    technical_support: new FormControl(''),
    integrated: new FormControl(''),
    inconsistency: new FormControl(''),
    imagine: new FormControl(''),
    cumbersome: new FormControl(''),
    confident: new FormControl(''),
    learn: new FormControl(''),
    error: new FormControl(''),
    interface: new FormControl(''),
    capabilities: new FormControl(''),
    satisfied: new FormControl(''),
  })

  option: {[key: string]: string} = {
    use_frequently: 'I think that I would like to use this system frequently',
    complex: 'I found the system unnecessarily complex',
    easy: 'I though the system was easy to use',
    technical_support: 'I think I would need the support of a technical person to be able to use this system',
    integrated: 'I found the various functions in this system were well integrated',
    inconsistency: 'I thought there was too much inconsistency in the system',
    imagine: 'I would imagine that most people would learn to use this system very quickly',
    cumbersome: 'I found the system very cumbersome to use',
    confident: 'I felt very confident using the system',
    learn: 'I needed to learn a lot of things before I could get going with this system.',
    error: 'The system gave error messages that clearly told me how to fix problems',
    interface: 'I liked using the interface of this system',
    capabilities: 'The system has all the functions and capabilities I expect it to have',
    satisfied: 'Overall, I am satisfied with the system',
    changed: 'What would you change/add to the tool?',
    comments: 'Any other comments?'
  }

  constructor(private http: HttpClient) { }

  handleFileInput(event: any) {
    this.file = event.target.files[0];
    if (this.file?.name && this.validFile(this.file?.name)) {
      this.validFileNotSubmitted.next(false);
    }
  }

  onSubmit() {
    if (this.file) {
      let fileName = this.file?.name;
      this.loading()

      if (this.validFile(fileName)) {
        this.id.setValue(fileName)
        this.validFileNotSubmitted.next(false);


        const fr = new FileReader();
        fr.readAsArrayBuffer(this.file);
        fr.onload = f => {
          
          const url = this.GOOGLE_UPLOAD_FILE_SCRIPT;
          
          if (f.target?.result && (typeof f.target?.result != 'string') && this.file) {
            const qs = new URLSearchParams({filename: fileName || this.file.name, mimeType: this.file.type});
            fetch(`${url}?${qs}`, {method: "POST", body: JSON.stringify([...new Int8Array(f.target?.result)])})
            .then(res => res.json())
            .then(e => {
              this.successMessage = e.filename + ' was successfully uploaded';
              this.errorMessage = ''
              this.loadingMessage = ''
              this.validFileNotSubmitted.next(false);
            })
            .catch(err => { this.errorMessage = err; this.loadingMessage = ''});
          }
        }
      } else {
        this.errorMessage = 'Invalid file upload, ensure you upload the txt file generated by the automated marker'
        this.successMessage = ''
        this.loadingMessage = ''
      } 
    }
  }

  validFile(fileName: string) {
    return fileName.startsWith('python-marker') && fileName.endsWith('.txt')
  }

  loading() {
    this.errorMessage =  ''
    this.successMessage = ''
    this.loadingMessage = 'Loading...'
  }

  submitQuestionnaire() {
    var formData: FormData = new FormData();

    Object.keys(this.form.value).forEach(key => {
      formData.append(key, this.form.get(key)?.value)
    })
    formData.append("id", this.id.value)

    this.http.post(this.GOOGLE_QUESTIONNAIRE_SCRIPT, formData).subscribe(
      (response) => {
        console.log(response);
      },
      (error) => {
        console.log(error);
      }
    );


  
  }


}
