import { Component, OnDestroy } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { BehaviorSubject, Subject, takeUntil } from 'rxjs';
import { UploadIdService } from '../upload/upload-id.service';


@Component({
  selector: 'app-file-upload',
  templateUrl: './file-upload.component.html',
  styleUrls: ['./file-upload.component.scss']
})
export class FileUploadComponent {
  private GOOGLE_UPLOAD_FILE_SCRIPT = "https://script.google.com/macros/s/AKfycbwjlQrzNtvxjm8GCQt6KSyYAMOWfm_qD2IIB5SvYl03rQUBLMD4-W3NTSDjVlMGwgDF/exec"
  private file: File | null = null;

  errorMessage = '';
  successMessage = '';
  loadingMessage = '';

  isFileInputted: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isFileSubmitted: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isFileUploaded: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  
  fileUpload = new FormControl('', Validators.required)


  constructor(private uploadIdService: UploadIdService) {}

  handleFileInput(event: any) {
    this.file = event.target.files[0];
    if (this.file?.name && this.validFile(this.file?.name)) {
      this.isFileInputted.next(true)
      this.uploadIdService.setFileId(this.file.name)
      this.errorMessage = ''
    } else if (this.file?.name && !this.validFile(this.file?.name)) {
      this.errorMessage = 'Invalid file name -'
      this.uploadIdService.setFileId('')
      if (!this.file.name.startsWith('python-marker')) {
        this.errorMessage += " check file name starts with 'python-marker'"
      } if (!this.file.name.endsWith('.txt')) {
        this.errorMessage += ' check file is a .txt file'
      }
    } else {
      this.uploadIdService.setFileId('')
      this.errorMessage = 'Error with file. Check you have uploaded the correct one'
    }
  }

  onSubmit() {
    if (this.file) {
      let fileName = this.file?.name;
      this.loading()

      if (this.validFile(fileName)) {
        this.isFileSubmitted.next(true)

        const fr = new FileReader();
        fr.readAsArrayBuffer(this.file);
        fr.onload = f => {
          
          const url = this.GOOGLE_UPLOAD_FILE_SCRIPT;
          
          if (f.target?.result && (typeof f.target?.result != 'string') && this.file) {
            const qs = new URLSearchParams({filename: fileName || this.file.name, mimeType: this.file.type});
            fetch(`${url}?${qs}`, {method: "POST", body: JSON.stringify([...new Int8Array(f.target?.result)])})
            .then(res => res.json())
            .then(e => {
              var returned_data = JSON.parse(e.data);
              if (e["result"] === 'success') {
                this.successMessage = returned_data["filename"][0] + ' was successfully uploaded';
                this.errorMessage = ''
                this.loadingMessage = ''
                this.isFileUploaded.next(true);
              } else {
                this.successMessage = ''
                this.errorMessage = 'Error saving file - please try again'
                this.loadingMessage = ''
                this.isFileSubmitted.next(false)
                this.isFileUploaded.next(false)
              }
            })
            .catch(err => { 
              this.errorMessage = err; 
              this.loadingMessage = '';
              this.successMessage = '';
              this.isFileSubmitted.next(false);
              this.isFileUploaded.next(false);
            });
          }
        }
      } else {
        this.errorMessage = 'Invalid file upload, ensure you upload the txt file generated by the automated marker'
        this.successMessage = ''
        this.loadingMessage = ''
      } 
    }
  }

  validFile(fileName: string) {
    return fileName.startsWith('python-marker') && fileName.endsWith('.txt')
  }

  loading() {
    this.errorMessage =  ''
    this.successMessage = ''
    this.loadingMessage = 'Loading...'
  }

  resetFileUpload() {
    this.fileUpload.reset();
    this.errorMessage = ''
    this.loadingMessage = ''
    this.successMessage = ''
    this.isFileInputted.next(false);
    this.isFileSubmitted.next(false);
    this.isFileUploaded.next(false);
    this.uploadIdService.setFileId('')
  }

}
